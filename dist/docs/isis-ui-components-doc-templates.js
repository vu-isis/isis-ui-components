angular.module("isis.ui.demoApp.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("/docs/ui_components_docs.html","<!DOCTYPE html>\r\n<html ng-app=\"isis.ui.demoApp\">\r\n<head>\r\n    <title>ISIS UI Components Documentation</title>\r\n\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.11.1/themes/black-tie/jquery-ui.css\">\r\n    <link type=\"text/css\" href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\">\r\n\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"isis-ui-components-docs.css\">\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"../isis-ui-components.css\">\r\n\r\n</head>\r\n<body ng-cloak>\r\n<div ng-controller=\"UIComponentsDemoController\" class=\"container\">\r\n\r\n    <h1>isis.ui.components</h1>\r\n\r\n    <section ng-repeat=\"component in components\" id=\"{{ component.name }}\">\r\n        <div class=\"page-header\">\r\n            <h1>{{ component.name }}\r\n                <small>(isis.ui.{{ component.name }})</small>\r\n            </h1>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6 show-grid\" ng-include=\"component.template\">\r\n\r\n            </div>\r\n            <div btf-markdown class=\"col-md-6\" ng-include=\"component.docs\">\r\n            </div>\r\n        </div>\r\n            <div class=\"row\"\r\n                 ng-if=\"component.sources\">\r\n\r\n                <ul class=\"nav nav-tabs\">\r\n                    <li ng-repeat=\"sourceFile in component.sources\"\r\n                        ng-click=\"component.selectedSourceFile = component.sources[$index]\">\r\n                        <a href=\"#\">{{sourceFile.fileName}}</a>\r\n                    </li>\r\n                </ul>\r\n                <!-- Tab panes -->\r\n                <div class=\"tab-content\">\r\n                    <div role=\"tabpanel\"\r\n                         class=\"tab-pane active\">\r\n                        <div ui-codemirror\r\n                             ui-codemirror-opts=\"component.selectedSourceFile.viewerOptions\"\r\n                             ng-model=\"component.selectedSourceFile.code\"\r\n                             ui-refresh=\"component.selectedSourceFile\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    </section>\r\n\r\n</div>\r\n<script src=\"https://code.jquery.com/jquery-2.1.1.min.js\"></script>\r\n<script src=\"https://code.jquery.com/ui/1.11.1/jquery-ui.min.js\"></script>\r\n<script src=\"../../bower_components/angular/angular.min.js\"></script>\r\n<script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\"></script>\r\n\r\n<script src=\"../isis-ui-components.js\"></script>\r\n<script src=\"../isis-ui-components-templates.js\"></script>\r\n\r\n<script src=\"isis-ui-components-docs.js\"></script>\r\n<script src=\"isis-ui-components-doc-templates.js\"></script>\r\n\r\n</body>\r\n</html>");
$templateCache.put("/library/contextmenu/docs/demo.html","<script type=\"text/ng-template\" id=\"contextmenu-custom-content.html\">\r\n    <div class=\"custom-content\" style=\"border:1px solid rgba(0,0,0,.15); padding: 1ex; background-color: #fff;\" ng-controller=\"ContextmenuCustomTemplateController\">\r\n        <div>\r\n            <button class=\"btn btn-default btn-sm pull-right\" ng-click=\"closeClick()\">Close this <i class=\"glyphicon glyphicon-remove-sign\"></i></button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n        <div>\r\n            <p>That you now the result of this equation?</p>\r\n            <label>2 + 2 = </label><input ng-model=\"parameter.value\" min=\"0\" max=\"99\" required ng-change=\"isValid(parameter.value)\"/>\r\n            <span ng-if=\"parameter.invalid\" class=\"label label-danger\">This can not be true!</span>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<div data-ng-controller=\"ContextmenuDemoController\">\r\n    <p>Test context-menus here:</p>\r\n    <button class=\"btn btn-default\"\r\n            contextmenu=\"preContextMenu($event)\"\r\n            isis-contextmenu\r\n            contextmenu-data=\"menuData\">\r\n        Contextmenu default (right-click)</button>\r\n    <p></p>\r\n    <button class=\"btn btn-default\"\r\n            contextmenu=\"preContextMenu($event)\"\r\n            isis-contextmenu\r\n            contextmenu-data=\"menuData\"\r\n            contextmenu-config=\"menuConfig1\">\r\n        Contextmenu on click, positioned to left-right</button>\r\n    <p></p>\r\n    <button class=\"btn btn-default\"\r\n            contextmenu=\"preContextMenu($event)\"\r\n            isis-contextmenu\r\n            contextmenu-config=\"menuConfig2\">\r\n            Custom content, appears on mouseover, positioned to left-right</button>\r\n</div>");
$templateCache.put("/library/dropdownNavigator/docs/demo.html","<div style=\"height: 220px;\" data-ng-controller=\"DropdownDemoController\">\r\n    <div style=\"background-color: #222;\">\r\n        <dropdown-navigator data-navigator=\"navigator\"></dropdown-navigator>\r\n    </div>\r\n</div>");
$templateCache.put("/library/hierarchicalMenu/docs/demo.html","<div style=\"height: 200px;\">\r\n    <div data-ng-controller=\"HierarchicalMenuDemoController\">\r\n        <hierarchical-menu menu=\"menu\"></hierarchical-menu>\r\n    </div>\r\n    <div class=\"clearfix\"></div>\r\n</div>");
$templateCache.put("/library/itemList/docs/demo.html","<script type=\"text/ng-template\" id=\"list-item-details.html\">\r\n    <div ng-controller=\"ListItemDetailsDemoController\"\r\n         class=\"custom-content\" style=\"border:1px solid rgba(0,0,0,.15); padding: 1ex; background-color: #fff;\">\r\n        <div class=\"clearfix\"></div>\r\n        <div>\r\n            <p>That you now the result of this equation?</p>\r\n            <label>2 + 2 = </label><input ng-model=\"parameter.value\" min=\"0\" max=\"99\" required\r\n                                          ng-change=\"isValid(parameter.value)\"/>\r\n            <span ng-if=\"parameter.invalid\" class=\"label label-danger\">This can not be true!</span>\r\n        </div>\r\n    </div>\r\n    More stuff can come here. As you wish. As you like it.\r\n</script>\r\n\r\n<script type=\"text/ng-template\" id=\"list-item-details2.html\">\r\n    <div ng-controller=\"ListItemDetailsDemoController2\">\r\n        <demo-sub-list\r\n            list-data=\"listData2\" config=\"config2\"></demo-sub-list>\r\n    </div>\r\n</script>\r\n\r\n<div data-ng-controller=\"ItemListDemoController\" style=\"height: 700px; overflow-x:auto; padding: 0 1ex;\">\r\n    <item-list list-data=\"listData\" config=\"config\" class=\"col-md-12\"></item-list>\r\n</div>");
$templateCache.put("/library/itemList/docs/headerTemplate.html","<h4><a class=\"item-title\"\r\n       ng-click=\"itemClick($event, item)\"\r\n       tooltip=\"{{ item.toolTip }}\"\r\n       tooltip-placement=\"right\">{{ item.title }} - this is custom-made header</a></h4>\r\n");
$templateCache.put("/library/itemList/docs/newItemTemplate.html","<form class=\"drop-box new-order-set\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n            <input type=\"text\" class=\"form-control\" data-ng-model=\"newItem.id\"\r\n                   placeholder=\"ID\">\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <input type=\"text\" class=\"form-control\" data-ng-model=\"newItem.title\"\r\n                   placeholder=\"New item name\">\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <textarea class=\"form-control edit-workspace-description\" rows=\"5\"\r\n                      data-ng-model=\"newItem.description\"\r\n                      placeholder=\"Description\"></textarea>\r\n        </div>\r\n    </div>\r\n    <div class=\"row form-footer\">\r\n        <div class=\"col-md-8\">\r\n            <button class=\"btn btn-default btn-submit btn-success\"\r\n                    data-ng-click=\"createItem(newItem)\">Create\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form>\r\n");
$templateCache.put("/library/propertyGrid/docs/property_grid_demo.html","<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n<meta charset=\"UTF-8\">\r\n<title></title>\r\n\r\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js\"></script>\r\n\r\n<!--<script src=\"//cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.20/angular.min.js\"></script>-->\r\n\r\n<script type=\"text/javascript\">\r\nvar DEBUG = true,\r\n        _jqueryVersion = \'2.1.0\',\r\n        _jqueryUIVersion = \'1.10.4\',\r\n        _bootsrapVersion = \'3.1.1\';\r\n\r\n\r\nrequire.config( {\r\n    baseUrl: \"../../../\",\r\n\r\n    map: {\r\n        \'*\': {\r\n            \'css\': \'lib/require/require-css/css\',\r\n            \'text\': \'lib/require/require-text/text\'\r\n        }\r\n    },\r\n\r\n    paths: {\r\n        \'jquery\': \'lib/jquery/jquery-\' + _jqueryVersion + ( DEBUG ? \'.min\' : \'\' ),\r\n        \'bootstrap\': \'lib/bootstrap/\' + _bootsrapVersion + \'/js/bootstrap\' + ( DEBUG ? \'.min\' : \'\' ),\r\n\r\n        \'angular\': \'lib/angular/angular-1.2.19/angular\' + ( DEBUG ? \'.min\' : \'\' ),\r\n        \'angular-ui-bootstrap\': \'lib/angular/ui-bootstrap/ui-bootstrap-tpls-0.11.0.min\'\r\n    },\r\n\r\n    shim: {\r\n        \'angular-ui-bootstrap\': [\'angular\', \'bootstrap\'],\r\n\r\n        \'bootstrap\': [\r\n            \'jquery\',\r\n            \'css!lib/bootstrap/\' + _bootsrapVersion + \'/css/bootstrap.min.css\',\r\n            \'css!lib/bootstrap/\' + _bootsrapVersion + \'/css/bootstrap-theme.min.css\'\r\n        ]\r\n    },\r\n\r\n    waitSeconds: 15\r\n} );\r\n\r\nrequirejs( [\r\n    \'angular-ui-bootstrap\',\r\n    \'isis-ui-components/propertyGrid/propertyGrid\'], function ( ngBootstrap, PropertyGrid ) {\r\n\r\n    var demoApp = angular.module( \'demoApp\', [\'ui.bootstrap\', \'isis.ui.propertyGrid\'] );\r\n\r\n    demoApp.controller( \'PropertyGridDemoController\', function ( $scope ) {\r\n        var onChange = function ( item ) {\r\n\r\n                    console.log( \'Item changed > \' + item.label, item );\r\n\r\n                },\r\n\r\n                attributes = [\r\n                    {\r\n                        id: \'Name\',\r\n                        label: \'Name\',\r\n                        values: [\r\n                            {\r\n                                value: \'This is my name\'\r\n                            }\r\n                        ],\r\n                        onChange: onChange\r\n                    },\r\n                    {\r\n\r\n                        id: \'compound\',\r\n                        label: \'Compound something\',\r\n                        cssClass: \'\',\r\n                        values: [\r\n                            {\r\n                                value: [\r\n                                    {\r\n                                        id: \'Position_x\',\r\n                                        label: \'X\',\r\n                                        values:[\r\n                                            {\r\n                                                value: 10\r\n                                            }\r\n                                        ]\r\n                                                //valueWidget: integerValueWidget,\r\n                                    },\r\n                                    {\r\n                                        id: \'Position_y\',\r\n                                        label: \'Y\',\r\n                                        values: [\r\n                                            {\r\n                                                value: 30\r\n                                            }\r\n                                        ]\r\n                                                //valueWidget: integerValueWidget,\r\n                                    },\r\n                                    {\r\n                                        id: \'Dabrack\',\r\n                                        label: \'Dabrack\',\r\n                                        values: [\r\n                                            {\r\n                                                value: \'This is my name\'\r\n                                            }\r\n                                        ],\r\n                                        onChange: onChange\r\n                                    }\r\n                                ],\r\n                                getDisplayValue: function ( value ) {\r\n                                    var coordinates = value.value;\r\n\r\n                                    return coordinates[0].values[0].value + \', \' + coordinates[1].values[0].value;\r\n                                },\r\n                                widget: {\r\n                                    type: \'compound\'\r\n                                }\r\n                            }\r\n                        ],\r\n                        onChange: onChange\r\n                    },\r\n                    {\r\n                        id: \'is_happy\',\r\n                        label: \'Happy or not?\',\r\n                        values: [\r\n                            { value: true }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: \'is_rich\',\r\n                        label: \'Rich or not?\',\r\n                        values: [\r\n                            { value: false }\r\n                        ]\r\n                    },\r\n                    {\r\n                        id: \'country\',\r\n                        label: \'Country\',\r\n                        values: [\r\n                            {\r\n                                value: \'U.S.A.\',\r\n                                widget: {\r\n                                    type: \'select\',\r\n                                    defaultValue: \'pol\',\r\n                                    config: {\r\n                                        multi: false,\r\n                                        options: [\r\n                                            {\r\n                                                label: \'U.S.A.\',\r\n                                                value: \'usa\'\r\n                                            },\r\n                                            {\r\n                                                label: \'Poland\',\r\n                                                value: \'pol\'\r\n                                            },\r\n                                            {\r\n                                                label: \'England\',\r\n                                                value: \'eng\'\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        ],\r\n                        onChange: onChange\r\n                    }\r\n                ],\r\n                visualizationProperties = [\r\n                    {\r\n                        id: \'color\',\r\n                        label: \'Color\',\r\n                        values: [\r\n                            {\r\n                                value: \'#ff0066\',\r\n                                widget: {\r\n                                    type: \'colorPicker\'\r\n                                }\r\n                            }\r\n                        ],\r\n                        onChange: onChange\r\n                    },\r\n\r\n                    {\r\n\r\n                        id: \'Position\',\r\n                        label: \'Position\',\r\n                        cssClass: \'\',\r\n                        values: [\r\n\r\n                            {\r\n                                id: \'Position_x\',\r\n                                label: \'X\',\r\n                                value: 10\r\n                                //valueWidget: integerValueWidget,\r\n                            },\r\n                            {\r\n                                id: \'Position_y\',\r\n                                label: \'Y\',\r\n                                value: 30\r\n                                //valueWidget: integerValueWidget,\r\n                            }\r\n                        ],\r\n                        onChange: onChange\r\n                    }\r\n\r\n                ],\r\n                config = {\r\n                    propertyLabelPostfix: \':\',\r\n                    mode: \'display\'\r\n                },\r\n                propertyGroup1 = {\r\n                    label: \'Attributes\',\r\n                    expanded: true,\r\n                    items: attributes\r\n                },\r\n                propertyGroup2 = {\r\n                    label: \'Visualization properties\',\r\n                    expanded: true,\r\n                    items: visualizationProperties\r\n                },\r\n                propertyGroups = [ propertyGroup1, propertyGroup2 ];\r\n\r\n        $scope.grid = {\r\n            propertyGroups: propertyGroups,\r\n            config: config,\r\n            id: \'propertyGrid1\'\r\n        };\r\n\r\n    } );\r\n\r\n    angular.bootstrap( document, [\'demoApp\'] );\r\n\r\n    console.log( \'Demo controller initialized\' );\r\n} );\r\n\r\n</script>\r\n\r\n<style>\r\n    .property-panel {\r\n        width: 300px;\r\n        font-size: 11px;\r\n    }\r\n\r\n</style>\r\n\r\n</head>\r\n<body>\r\n\r\n<div data-ng-controller=\"PropertyGridDemoController\" style=\"padding: 10px\">\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-1\">Mode:</div>\r\n            <div class=\"col-md-4\">\r\n                <div class=\"btn-group\">\r\n                    <label class=\"btn btn-default\" ng-model=\"grid.config.mode\" btn-radio=\"\'display\'\">Display</label>\r\n                    <label class=\"btn btn-default\" ng-model=\"grid.config.mode\" btn-radio=\"\'edit\'\">Edit</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"property-panel\">\r\n        <property-grid grid-data=\"grid\" unresponsive=\"true\"></property-grid>\r\n    </div>\r\n\r\n    <div class=\"container-fluid\">\r\n        <property-grid grid-data=\"grid\"></property-grid>\r\n    </div>\r\n`\r\n</div>\r\n\r\n</body>\r\n</html>");
$templateCache.put("/library/searchBox/docs/demo.html","<div data-ng-controller=\"SearchBoxDemoController\" style=\"height: 100px; overflow-x:auto; padding: 0 1ex;\">\r\n    <search-box></search-box>\r\n</div>");
$templateCache.put("/library/simpleDialog/docs/demo.html","<script type=\"text/ng-template\" id=\"confirm-content-template\">\r\n    <p>That you now the result of this equation?</p>\r\n    <label>2 + 2 = </label><input ng-model=\"parameter.value\" min=\"0\" max=\"99\" required ng-change=\"isValid()\"/>\r\n    <span ng-if=\"parameter.invalid\" class=\"label label-danger\">This can not be true!</span>\r\n</script>\r\n\r\n<div data-ng-controller=\"ConfirmDialogDemoController\">\r\n    Test a dialog here: <button class=\"btn btn-default\" ng-click=\"openDialog()\">Open dialog</button>\r\n</div>");
$templateCache.put("/library/treeNavigator/docs/demo.html","<div data-ng-controller=\"TreeNavigatorDemoController\" style=\"height: 600px; overflow-x:auto;\">\r\n    <tree-navigator tree-data=\"treeData\" config=\"config\"></tree-navigator>\r\n</div>");
$templateCache.put("/docs/docs_app.js","/*globals angular, require*/\r\n\'use strict\';\r\n\r\nvar components = [\r\n    {\r\n      name: \'itemList\',\r\n      sources: [ \'demo.html\', \'newItemTemplate.html\', \'demo.js\']\r\n    },\r\n    {\r\n      name: \'hierarchicalMenu\',\r\n      sources: [ \'demo.html\', \'demo.js\']\r\n    },\r\n    {\r\n      name: \'contextmenu\',\r\n      sources: [ \'demo.html\', \'demo.js\']\r\n    },\r\n    {\r\n      name: \'dropdownNavigator\',\r\n      sources: [ \'demo.html\', \'demo.js\']\r\n    },\r\n    {\r\n        name: \'treeNavigator\',\r\n        sources: [\'demo.html\', \'demo.js\']\r\n    }\r\n];\r\n\r\nrequire(\'../library/hierarchicalMenu/docs/demo.js\');\r\nrequire(\'../library/contextmenu/docs/demo.js\');\r\nrequire(\'../library/dropdownNavigator/docs/demo.js\');\r\nrequire(\'../library/treeNavigator/docs/demo.js\');\r\nrequire(\'../library/itemList/docs/demo.js\');\r\n\r\nrequire(\'angular-sanitize\');\r\nwindow.Showdown = require(\'showdown\');\r\nrequire(\'angular-markdown-directive\');\r\n\r\nrequire(\'codemirror-css\');\r\nwindow.CodeMirror = require(\'codemirror\');\r\n\r\nrequire(\'codemirror/mode/htmlmixed/htmlmixed\');\r\nrequire(\'codemirror/mode/xml/xml\');\r\nrequire(\'codemirror/mode/javascript/javascript\');\r\n\r\nrequire(\'angular-ui-codemirror\');\r\n\r\n\r\nvar demoApp = angular.module(\r\n    \'isis.ui.demoApp\', [\r\n        \'isis.ui.demoApp.templates\',\r\n        \'btford.markdown\',\r\n        \'ui.codemirror\'\r\n    ].concat(components.map(function (e) {\r\n        return \'isis.ui.\' + e.name + \'.demo\';\r\n    }))\r\n);\r\n\r\ndemoApp.run(function () {\r\n    console.log(\'DemoApp run...\');\r\n});\r\n\r\ndemoApp.controller(\r\n    \'UIComponentsDemoController\',\r\n    function ($scope, $templateCache) {\r\n\r\n        var fileExtensionRE,\r\n            codeMirrorModes;\r\n\r\n        fileExtensionRE = /(?:\\.([^.]+))?$/;\r\n\r\n        codeMirrorModes = {\r\n            \'js\': \'javascript\',\r\n            \'html\': \'htmlmixed\'\r\n        };\r\n\r\n        $scope.components = components.map(function (component) {\r\n            var sources,\r\n                viewerOptions,\r\n                fileExtension;\r\n\r\n            if (angular.isArray(component.sources)) {\r\n                sources = component.sources.map(function (sourceFile) {\r\n\r\n                    fileExtension = fileExtensionRE.exec(sourceFile);\r\n\r\n                    viewerOptions = {\r\n                        lineWrapping: true,\r\n                        lineNumbers: true,\r\n                        readOnly: true,\r\n                        mode: codeMirrorModes[fileExtension[1]] || \'xml\'\r\n                    };\r\n\r\n                    return {\r\n                        fileName: sourceFile,\r\n                        code: $templateCache.get(\'/library/\' + component.name + \'/docs/\' +\r\n                            sourceFile),\r\n                        viewerOptions: viewerOptions\r\n                    };\r\n                });\r\n            }\r\n\r\n            return {\r\n                name: component.name,\r\n                template: \'/library/\' + component.name + \'/docs/demo.html\',\r\n                docs: \'/library/\' + component.name + \'/docs/readme.md\',\r\n                sources: sources,\r\n                selectedSourceFile: sources[0]\r\n            };\r\n        });\r\n\r\n    });\r\n\r\nwindow.countOfSesquatches = function (printWatchers) {\r\n\r\n    var root = angular.element(document.getElementsByTagName(\'body\'));\r\n\r\n    var watchers = [];\r\n\r\n    var f = function (element) {\r\n        angular.forEach([\'$scope\', \'$isolateScope\'], function (scopeProperty) {\r\n            if (element.data() && element.data()\r\n                .hasOwnProperty(scopeProperty)) {\r\n                angular.forEach(element.data()[scopeProperty].$$watchers, function (watcher) {\r\n                    watchers.push(watcher);\r\n                });\r\n            }\r\n        });\r\n\r\n        angular.forEach(element.children(), function (childElement) {\r\n            f(angular.element(childElement));\r\n        });\r\n    };\r\n\r\n    f(root);\r\n\r\n    // Remove duplicate watchers\r\n    var watchersWithoutDuplicates = [];\r\n    angular.forEach(watchers, function (item) {\r\n        if (watchersWithoutDuplicates.indexOf(item) < 0) {\r\n            watchersWithoutDuplicates.push(item);\r\n            if (printWatchers === true) {\r\n                console.log(item);\r\n            }\r\n        }\r\n    });\r\n\r\n    console.log(watchersWithoutDuplicates.length);\r\n\r\n};");
$templateCache.put("/library/contextmenu/docs/demo.js","/*globals console, angular*/\r\n\r\n\'use strict\';\r\n\r\nvar demoApp = angular.module(\'isis.ui.contextmenu.demo\', [\'isis.ui.contextmenu\']);\r\n\r\ndemoApp.controller(\'ContextmenuCustomTemplateController\', function ($scope, contextmenuService) {\r\n    $scope.parameter = {};\r\n\r\n    $scope.closeClick = function () {\r\n        console.log(\'closing this manually\');\r\n        contextmenuService.close();\r\n    };\r\n\r\n    $scope.isValid = function (num) {\r\n        console.log(\'Who knows if is valid?\', num);\r\n\r\n        if (parseInt(num, 10) === 4) {\r\n            $scope.parameter.invalid = false;\r\n        } else {\r\n            $scope.parameter.invalid = true;\r\n        }\r\n    };\r\n\r\n});\r\n\r\ndemoApp.controller(\'ContextmenuDemoController\', function ($scope) {\r\n\r\n    var menuData = [{\r\n        id: \'top\',\r\n        items: [{\r\n            id: \'newProject\',\r\n            label: \'New project ...\',\r\n            iconClass: \'glyphicon glyphicon-plus\',\r\n            action: function () {\r\n                console.log(\'New project clicked\');\r\n            },\r\n            actionData: {}\r\n        }, {\r\n            id: \'importProject\',\r\n            label: \'Import project ...\',\r\n            iconClass: \'glyphicon glyphicon-import\',\r\n            action: function () {\r\n                console.log(\'Import project clicked\');\r\n            },\r\n            actionData: {}\r\n        }]\r\n    }, {\r\n        id: \'projects\',\r\n        label: \'Recent projects\',\r\n        totalItems: 20,\r\n        items: [],\r\n        showAllItems: function () {\r\n            console.log(\'Recent projects clicked\');\r\n        }\r\n    }, {\r\n        id: \'preferences\',\r\n        label: \'preferences\',\r\n        items: [{\r\n            id: \'showPreferences\',\r\n            label: \'Show preferences\',\r\n            action: function () {\r\n                console.log(\'Show preferences\');\r\n            },\r\n            menu: [{\r\n                items: [{\r\n                    id: \'preferences 1\',\r\n                    label: \'Preferences 1\'\r\n                }, {\r\n                    id: \'preferences 2\',\r\n                    label: \'Preferences 2\'\r\n                }, {\r\n                    id: \'preferences 3\',\r\n                    label: \'Preferences 3\',\r\n                    menu: [{\r\n                        items: [{\r\n                            id: \'sub_preferences 1\',\r\n                            label: \'Sub preferences 1\'\r\n                        }, {\r\n                            id: \'sub_preferences 2\',\r\n                            label: \'Sub preferences 2\'\r\n                        }]\r\n                    }]\r\n                }]\r\n            }]\r\n        }]\r\n    }];\r\n\r\n    $scope.menuConfig1 = {\r\n        triggerEvent: \'click\',\r\n        position: \'right bottom\'\r\n    };\r\n\r\n    $scope.menuConfig2 = {\r\n        triggerEvent: \'mouseover\',\r\n        position: \'left bottom\',\r\n        contentTemplateUrl: \'contextmenu-custom-content.html\',\r\n        doNotAutoClose: true,\r\n        menuCssClass: \'green-shadow\'\r\n    };\r\n\r\n    $scope.menuData = menuData;\r\n\r\n    $scope.preContextMenu = function (e) {\r\n        console.log(\'In preContextMenu \', e);\r\n    };\r\n\r\n\r\n});");
$templateCache.put("/library/dropdownNavigator/docs/demo.js","/*globals console, angular*/\r\n\'use strict\';\r\n\r\nvar demoApp = angular.module(\'isis.ui.dropdownNavigator.demo\', [\'isis.ui.dropdownNavigator\']);\r\n\r\ndemoApp.controller(\'DropdownDemoController\', function ($scope) {\r\n    var firstMenu,\r\n        secondMenu;\r\n\r\n    firstMenu = {\r\n        id: \'root\',\r\n        label: \'GME\',\r\n        //            isSelected: true,\r\n        itemClass: \'gme-root\',\r\n        menu: []\r\n    };\r\n\r\n    secondMenu = {\r\n        id: \'secondItem\',\r\n        label: \'Projects\',\r\n        menu: []\r\n    };\r\n\r\n    firstMenu.menu = [{\r\n        id: \'top\',\r\n        items: [{\r\n            id: \'newProject\',\r\n            label: \'New project ...\',\r\n            iconClass: \'glyphicon glyphicon-plus\',\r\n            action: function () {\r\n                console.log(\'New project clicked\');\r\n            },\r\n            actionData: {}\r\n        }, {\r\n            id: \'importProject\',\r\n            label: \'Import project ...\',\r\n            iconClass: \'glyphicon glyphicon-import\',\r\n            action: function () {\r\n                console.log(\'Import project clicked\');\r\n            },\r\n            actionData: {}\r\n        }]\r\n    }, {\r\n        id: \'projects\',\r\n        label: \'Recent projects\',\r\n        totalItems: 20,\r\n        items: [],\r\n        showAllItems: function () {\r\n            console.log(\'Recent projects clicked\');\r\n        }\r\n    }, {\r\n        id: \'preferences\',\r\n        label: \'preferences\',\r\n        items: [{\r\n            id: \'showPreferences\',\r\n            label: \'Show preferences\',\r\n            action: function () {\r\n                console.log(\'Show preferences\');\r\n            },\r\n            menu: [{\r\n                items: [{\r\n                    id: \'preferences 1\',\r\n                    label: \'Preferences 1\'\r\n                }, {\r\n                    id: \'preferences 2\',\r\n                    label: \'Preferences 2\'\r\n                }, {\r\n                    id: \'preferences 3\',\r\n                    label: \'Preferences 3\',\r\n                    menu: [{\r\n                        items: [{\r\n                            id: \'sub_preferences 1\',\r\n                            label: \'Sub preferences 1\'\r\n                        }, {\r\n                            id: \'sub_preferences 2\',\r\n                            label: \'Sub preferences 2\'\r\n                        }]\r\n                    }]\r\n                }]\r\n            }]\r\n        }]\r\n    }];\r\n\r\n\r\n    secondMenu = {\r\n        id: \'secondItem\',\r\n        label: \'Projects\',\r\n        menu: []\r\n    };\r\n\r\n    secondMenu.menu = [{\r\n        id: \'secondMenuMenu\',\r\n        items: [\r\n\r\n            {\r\n                id: \'showPreferences\',\r\n                label: \'Show preferences\',\r\n                action: function () {\r\n                    console.log(\'Show preferences\');\r\n                },\r\n                menu: [{\r\n                    items: [{\r\n                        id: \'preferences 1\',\r\n                        label: \'Preferences 1\'\r\n                    }, {\r\n                        id: \'preferences 2\',\r\n                        label: \'Preferences 2\'\r\n                    }, {\r\n                        id: \'preferences 3\',\r\n                        label: \'Preferences 3\',\r\n                        menu: [{\r\n                            items: [{\r\n                                id: \'sub_preferences 1\',\r\n                                label: \'Sub preferences 1\'\r\n                            }, {\r\n                                id: \'sub_preferences 2\',\r\n                                label: \'Sub preferences 2\'\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }\r\n        ]\r\n    }];\r\n\r\n    $scope.navigator = {\r\n        items: [\r\n            firstMenu,\r\n            secondMenu\r\n        ],\r\n        separator: true\r\n    };\r\n\r\n\r\n});");
$templateCache.put("/library/hierarchicalMenu/docs/demo.js","/*globals console, angular*/\r\n\'use strict\';\r\n\r\nvar demoApp = angular.module(\'isis.ui.hierarchicalMenu.demo\', [\r\n    \'isis.ui.hierarchicalMenu\'\r\n]);\r\n\r\ndemoApp.controller(\'HierarchicalMenuDemoController\', function ($scope, $interval) {\r\n\r\n    var menu,\r\n        menuItemDisabledAndEnabled;\r\n\r\n    menuItemDisabledAndEnabled = {\r\n        id: \'menuItemDisabledAndEnabled\',\r\n        disabled: true,\r\n        label: \'Disabled by default\',\r\n        iconClass: \'glyphicon glyphicon-remove\',\r\n        action: function () {\r\n            console.log(\'menuItemDisabledAndEnabled clicked\');\r\n        },\r\n        actionData: {}\r\n    };\r\n\r\n    menu = [{\r\n        id: \'top\',\r\n        items: [{\r\n            id: \'newProject\',\r\n            label: \'New project ...\',\r\n            iconClass: \'glyphicon glyphicon-plus\',\r\n            action: function () {\r\n                console.log(\'New project clicked\');\r\n            },\r\n            actionData: {}\r\n        }, {\r\n            id: \'importProject\',\r\n            label: \'Import project ...\',\r\n            iconClass: \'glyphicon glyphicon-import\',\r\n            action: function () {\r\n                console.log(\'Import project clicked\');\r\n            },\r\n            actionData: {}\r\n        }, {\r\n            id: \'importProject_disabled\',\r\n            disabled: true,\r\n            label: \'Import project (disabled)...\',\r\n            iconClass: \'glyphicon glyphicon-import\',\r\n            action: function () {\r\n                console.log(\'Import project disabled clicked\');\r\n            },\r\n            actionData: {}\r\n        },\r\n        menuItemDisabledAndEnabled]\r\n    }, {\r\n        id: \'projects\',\r\n        label: \'Recent projects\',\r\n        totalItems: 20,\r\n        items: [],\r\n        showAllItems: function () {\r\n            console.log(\'Recent projects clicked\');\r\n        }\r\n    }, {\r\n        id: \'preferences\',\r\n        label: \'preferences\',\r\n        items: [{\r\n            id: \'showPreferences\',\r\n            label: \'Show preferences\',\r\n            action: function () {\r\n                console.log(\'Show preferences\');\r\n            },\r\n            menu: [{\r\n                items: [{\r\n                    id: \'preferences 1\',\r\n                    label: \'Preferences 1\'\r\n                }, {\r\n                    id: \'preferences 2\',\r\n                    label: \'Preferences 2\'\r\n                }, {\r\n                    id: \'preferences 3\',\r\n                    label: \'Preferences 3\',\r\n                    menu: [{\r\n                        items: [{\r\n                            id: \'sub_preferences 1\',\r\n                            label: \'Sub preferences 1\',\r\n                            action: function () {\r\n                                console.log(\'This should work\');\r\n                            }\r\n                        }, {\r\n                            id: \'sub_preferences 2\',\r\n                            label: \'Sub preferences 2\',\r\n                            action: function () {\r\n                                console.log(\'This should work\');\r\n                            }\r\n                        }]\r\n                    }]\r\n                }, {\r\n                    id: \'preferences 3 (disabled)\',\r\n                    label: \'Preferences 3 (disabled)\',\r\n                    disabled: true,\r\n                    menu: [{\r\n                        items: [{\r\n                            id: \'sub_preferences 1 (disabled)\',\r\n                            label: \'Sub preferences 1 (disabled)\',\r\n                            action: function () {\r\n                                console.log(\'This should not work\');\r\n                            }\r\n                        }, {\r\n                            id: \'sub_preferences 2 (disabled)\',\r\n                            label: \'Sub preferences 2 (disabled)\',\r\n                            action: function () {\r\n                                console.log(\'This should not work\');\r\n                            }\r\n                        }]\r\n                    }]\r\n                }]\r\n            }]\r\n        }]\r\n    }];\r\n\r\n    $scope.menu = menu;\r\n\r\n\r\n    $interval(function () {\r\n        // emulate that this menu item will be changed from the code through async functions.\r\n        menuItemDisabledAndEnabled.disabled = !menuItemDisabledAndEnabled.disabled;\r\n        if (menuItemDisabledAndEnabled.disabled) {\r\n            menuItemDisabledAndEnabled.iconClass = \'glyphicon glyphicon-remove\';\r\n        } else {\r\n            menuItemDisabledAndEnabled.iconClass = \'glyphicon glyphicon-ok\';\r\n        }\r\n    }, 2000);\r\n});");
$templateCache.put("/library/itemList/docs/demo.js","/*globals angular*/\r\n\'use strict\';\r\n\r\nvar demoApp = angular.module(\'isis.ui.itemList.demo\', [\'isis.ui.itemList\']);\r\n\r\ndemoApp.controller(\'ListItemDetailsDemoController\', function ($scope) {\r\n    $scope.parameter = {};\r\n\r\n    $scope.isValid = function (num) {\r\n        console.log(\'Who knows if is valid?\', num);\r\n\r\n        if (parseInt(num, 10) === 4) {\r\n            $scope.parameter.invalid = false;\r\n        } else {\r\n            $scope.parameter.invalid = true;\r\n        }\r\n    };\r\n\r\n\r\n});\r\n\r\ndemoApp.controller(\'ListItemDetailsDemoController2\', function ($scope) {\r\n    var i,\r\n        items2 = [],\r\n        itemGenerator2,\r\n        config;\r\n\r\n    itemGenerator2 = function (id) {\r\n\r\n        return {\r\n            id: id,\r\n            title: \'List sub-item \' + id,\r\n            toolTip: \'Open item\',\r\n            description: \'This is description here\',\r\n            lastUpdated: {\r\n                time: Date.now(),\r\n                user: \'N/A\'\r\n\r\n            },\r\n            stats: [{\r\n                value: id,\r\n                tooltip: \'Orders\',\r\n                iconClass: \'fa fa-cubes\'\r\n            }],\r\n            details: \'Some detailed text. Lorem ipsum ama fea rin the poc ketofmyja cket.\'\r\n        };\r\n    };\r\n\r\n\r\n    for (i = 0; i < 20; i++) {\r\n        items2.push(itemGenerator2(i));\r\n    }\r\n\r\n    config = {\r\n\r\n        sortable: true,\r\n        secondaryItemMenu: true,\r\n        detailsCollapsible: false,\r\n        showDetailsLabel: \'Show details\',\r\n        hideDetailsLabel: \'Hide details\',\r\n\r\n        // Event handlers\r\n\r\n        itemSort: function (jQEvent, ui) {\r\n            console.log(\'Sort happened\', jQEvent, ui);\r\n        },\r\n\r\n        itemClick: function (event, item) {\r\n            console.log(\'Clicked: \' + item);\r\n        },\r\n\r\n        itemContextmenuRenderer: function (e, item) {\r\n            console.log(\'Contextmenu was triggered for node:\', item);\r\n\r\n            return [{\r\n                items: [\r\n\r\n                    {\r\n                        id: \'create\',\r\n                        label: \'Create new\',\r\n                        disabled: true,\r\n                        iconClass: \'fa fa-plus\'\r\n                    }\r\n                ]\r\n            }];\r\n        },\r\n\r\n        detailsRenderer: function (item) {\r\n            item.details = \'My details are here now!\';\r\n        },\r\n\r\n        newItemForm: {\r\n            title: \'Create new item\',\r\n            itemTemplateUrl: \'/library/itemList/docs/newItemTemplate.html\',\r\n            expanded: false,\r\n            controller: function ($scope) {\r\n                $scope.createItem = function (newItem) {\r\n\r\n                    newItem.url = \'something\';\r\n                    newItem.toolTip = newItem.title;\r\n\r\n                    items2.push(newItem);\r\n\r\n                    $scope.newItem = {};\r\n\r\n                    config.newItemForm.expanded = false; // this is how you close the form itself\r\n\r\n                };\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    $scope.listData2 = {\r\n        items: items2\r\n    };\r\n\r\n    $scope.config2 = config;\r\n\r\n});\r\n\r\ndemoApp.directive(\'demoSubList\', function () {\r\n    return {\r\n        restrict: \'E\',\r\n        replace: false,\r\n        scope: {\r\n            listData: \'=\',\r\n            config: \'=\'\r\n        },\r\n        template: \'<item-list list-data=\"listData\" config=\"config\" class=\"col-md-12\"></item-list>\'\r\n    };\r\n});\r\n\r\ndemoApp.controller(\'ItemListDemoController\', function ($scope) {\r\n\r\n\r\n    var\r\n    i,\r\n\r\n        items = [],\r\n\r\n        itemGenerator,\r\n        getItemContextmenu,\r\n        config;\r\n\r\n    itemGenerator = function (id) {\r\n\r\n        var lastUpdated;\r\n\r\n        if (Math.random() > 0.5) {\r\n            lastUpdated = {\r\n                time: Date.now(),\r\n                user: \'N/A\'\r\n\r\n            };\r\n        }\r\n\r\n        return {\r\n            id: id,\r\n            title: \'List item \' + id,\r\n            cssClass: \'my-item\',\r\n            toolTip: \'Open item\',\r\n            description: \'This is description here\',\r\n            headerTemplateUrl: Math.random() > 0.5 ?\r\n                \'/library/itemList/docs/headerTemplate.html\' : undefined,\r\n            taxonomyTerms: [{\r\n                id: \'tag1\',\r\n                name: \'Tag A\',\r\n                url: \'http://vanderbilt.edu\'\r\n            }, {\r\n                id: \'tag2\',\r\n                name: \'Tag B\',\r\n                url: \'http://vanderbilt.edu\'\r\n            }],\r\n            lastUpdated: lastUpdated,\r\n            stats: [{\r\n                value: id,\r\n                toolTip: \'Orders\',\r\n                iconClass: \'fa fa-cubes\'\r\n            }],\r\n            details: \'Some detailed text. Lorem ipsum ama fea rin the poc ketofmyja cket.\',\r\n            detailsTemplateUrl: Math.random() < 0.5 ? \'list-item-details.html\' : \'list-item-details2.html\'\r\n        };\r\n    };\r\n\r\n\r\n    for (i = 0; i < 20; i++) {\r\n        items.push(itemGenerator(i));\r\n    }\r\n\r\n    getItemContextmenu = function (item) {\r\n\r\n        var defaultItemContextmenu = [{\r\n            items: [{\r\n                id: \'create\',\r\n                label: \'Create new\',\r\n                disabled: true,\r\n                iconClass: \'fa fa-plus\'\r\n            }, {\r\n                id: \'dummy\',\r\n                label: \'Just for test \' + item.id,\r\n\r\n                actionData: item,\r\n\r\n                action: function (data) {\r\n                    console.log(\'testing \', data);\r\n                }\r\n\r\n            }, {\r\n                id: \'rename\',\r\n                label: \'Rename\'\r\n            }, {\r\n                id: \'preferences 3\',\r\n                label: \'Preferences 3\',\r\n                menu: [{\r\n                    items: [{\r\n                        id: \'sub_preferences 1\',\r\n                        label: \'Sub preferences 1\'\r\n                    }, {\r\n                        id: \'sub_preferences 2\',\r\n                        label: \'Sub preferences 2\',\r\n                        action: function (data) {\r\n                            console.log(\'testing2 \', data);\r\n                        }\r\n                    }]\r\n                }]\r\n            }]\r\n        }];\r\n\r\n        return defaultItemContextmenu;\r\n\r\n    };\r\n\r\n    config = {\r\n\r\n        //sortable: true,\r\n        onItemDragStart: function(e, item) {\r\n            console.log(\'Start dragging\', item);\r\n        },\r\n\r\n        onItemDragEnd: function(e, item) {\r\n            console.log(\'Finish dragging\', item);\r\n        },\r\n\r\n        secondaryItemMenu: true,\r\n        detailsCollapsible: true,\r\n        showDetailsLabel: \'Show details\',\r\n        hideDetailsLabel: \'Hide details\',\r\n\r\n        noItemsMessage: \'List is empty.\',\r\n\r\n        // Event handlers\r\n\r\n        itemSort: function (jQEvent, ui) {\r\n            console.log(\'Sort happened\', jQEvent, ui);\r\n        },\r\n\r\n        itemClick: function (event, item) {\r\n            console.log(\'Clicked: \' + item);\r\n        },\r\n\r\n        itemContextmenuRenderer: function (e, item) {\r\n            console.log(\'Contextmenu was triggered for node:\', item);\r\n\r\n            return getItemContextmenu(item);\r\n        },\r\n\r\n        detailsRenderer: function (item) {\r\n            item.details = \'My details are here now!\';\r\n        },\r\n\r\n        newItemForm: {\r\n            title: \'Create new item\',\r\n            itemTemplateUrl: \'/library/itemList/docs/newItemTemplate.html\',\r\n            expanded: false,\r\n            controller: function ($scope) {\r\n                $scope.createItem = function (newItem) {\r\n\r\n                    newItem.url = \'something\';\r\n                    newItem.toolTip = newItem.title;\r\n\r\n                    items.push(newItem);\r\n\r\n                    $scope.newItem = {};\r\n\r\n                    config.newItemForm.expanded = false; // this is how you close the form itself\r\n\r\n                };\r\n            }\r\n        },\r\n\r\n        filter: {}\r\n\r\n    };\r\n\r\n    $scope.listData = {\r\n        items: items\r\n    };\r\n\r\n    $scope.config = config;\r\n\r\n});");
$templateCache.put("/library/searchBox/docs/demo.js","/*globals angular*/\r\n\'use strict\';\r\n\r\nvar demoApp = angular.module(\'isis.ui.searchBox.demo\', [\'isis.ui.searchBox\']);\r\n\r\ndemoApp.controller(\'SearchBoxDemoController\', function () {\r\n\r\n});");
$templateCache.put("/library/simpleDialog/docs/demo.js","/*globals console, angular*/\r\n\r\n\'use strict\';\r\n\r\nvar isValid,\r\n    demoApp = angular.module(\'isis.ui.simpleDialog.demo\', [\'isis.ui.simpleDialog\']),\r\n\r\n    parameter = {\r\n        value: 10,\r\n        invalid: true\r\n    };\r\n\r\ndemoApp.controller(\'ConfirmDialogDemoController\', function ($scope, $simpleDialog) {\r\n\r\n    isValid = function () {\r\n\r\n        var result = (Number(parameter.value) === 4);\r\n\r\n        console.log(\'Validator was called\');\r\n        console.log(\'Sum is: \' + parameter.value, result);\r\n        parameter.invalid = !result;\r\n\r\n        return result;\r\n\r\n    };\r\n\r\n\r\n    $scope.parameter = parameter;\r\n\r\n    $scope.isValid = function () {\r\n        isValid();\r\n        if (!$scope.$$phase) {\r\n            $scope.$apply();\r\n        }\r\n    };\r\n\r\n    $scope.openDialog = function () {\r\n\r\n        $simpleDialog.open({\r\n            dialogTitle: \'Are you sure?\',\r\n            dialogContentTemplate: \'confirm-content-template\',\r\n            onOk: function () {\r\n                console.log(\'OK was picked\');\r\n            },\r\n            onCancel: function () {\r\n                console.log(\'This was canceled\');\r\n            },\r\n            validator: isValid,\r\n            size: \'lg\', // can be sm or lg\r\n            scope: $scope\r\n        });\r\n\r\n    };\r\n\r\n\r\n});\r\n\r\ndemoApp.controller(\'ConfirmDialogDemoDataController\', function () {\r\n\r\n});");
$templateCache.put("/library/treeNavigator/docs/demo.js","/*globals angular*/\r\n\'use strict\';\r\n\r\nrequire(\'ngDragDrop\');\r\n\r\nvar demoApp = angular.module(\'isis.ui.treeNavigator.demo\', [\r\n    \'isis.ui.treeNavigator\',\r\n    \'ang-drag-drop\'\r\n]);\r\n\r\ndemoApp.controller(\'TreeNavigatorDemoController\', function($scope, $log, $q, $timeout) {\r\n\r\n    var config,\r\n        treeNodes = {},\r\n\r\n        addNode,\r\n        removeNode,\r\n        getNodeContextmenu,\r\n        dummyTreeDataGenerator,\r\n        sortChildren;\r\n\r\n    getNodeContextmenu = function(node) {\r\n\r\n        var defaultNodeContextmenu = [{\r\n            items: [{\r\n                id: \'create\',\r\n                label: \'Create new\',\r\n                disabled: true,\r\n                iconClass: \'fa fa-plus\',\r\n                menu: []\r\n            }, {\r\n                id: \'dummy\',\r\n                label: \'Just for test \' + node.id,\r\n\r\n                actionData: node,\r\n\r\n                action: function(data) {\r\n                    $log.log(\'testing \', data);\r\n                }\r\n\r\n            }, {\r\n                id: \'rename\',\r\n                label: \'Rename\'\r\n            }, {\r\n                id: \'delete\',\r\n                label: \'Delete\',\r\n                iconClass: \'fa fa-minus\',\r\n                actionData: {\r\n                    id: node.id\r\n                },\r\n                action: function(data) {\r\n                    removeNode(data.id);\r\n                }\r\n            }, {\r\n                id: \'preferences 3\',\r\n                label: \'Preferences 3\',\r\n                menu: [{\r\n                    items: [{\r\n                        id: \'sub_preferences 1\',\r\n                        label: \'Sub preferences 1\'\r\n                    }, {\r\n                        id: \'sub_preferences 2\',\r\n                        label: \'Sub preferences 2\',\r\n                        action: function(data) {\r\n                            $log.log(\'testing2 \', data);\r\n                        }\r\n                    }]\r\n                }]\r\n            }]\r\n        }];\r\n\r\n        return defaultNodeContextmenu;\r\n\r\n    };\r\n\r\n    dummyTreeDataGenerator = function(treeNode, name, maxCount, levels, idOffset) {\r\n        var i,\r\n            id,\r\n            count,\r\n            childNode;\r\n\r\n        levels = levels || 0;\r\n\r\n        count = maxCount;\r\n\r\n        for (i = 0; i < count; i += 1) {\r\n            id = name + (i + (idOffset || 0));\r\n\r\n            childNode = addNode(treeNode, id, i);\r\n\r\n            if (levels > 0) {\r\n                dummyTreeDataGenerator(childNode, id + \'.\', maxCount, levels - 1);\r\n            }\r\n        }\r\n\r\n        return treeNode.children;\r\n\r\n    };\r\n\r\n    addNode = function(parentTreeNode, id, i) {\r\n        var newTreeNode,\r\n            children = [];\r\n\r\n\r\n        // node structure\r\n        newTreeNode = {\r\n            label: id,\r\n            extraInfo: \'Extra info\',\r\n            children: children,\r\n            childrenCount: 0,\r\n            nodeData: {},\r\n            iconClass: \'fa fa-file-o\',\r\n\r\n            draggable: true,\r\n            dragChannel: \'a\',\r\n            dropChannel: (Math.random() > 0.5) ? \'a\' : \'b\',\r\n            order: i\r\n        };\r\n\r\n        newTreeNode.id = id;\r\n\r\n        // add the new node to the map\r\n        treeNodes[newTreeNode.id] = newTreeNode;\r\n\r\n\r\n        if (parentTreeNode) {\r\n            // if a parent was given add the new node as a child node\r\n            parentTreeNode.iconClass = undefined;\r\n            parentTreeNode.children.push(newTreeNode);\r\n\r\n\r\n            parentTreeNode.childrenCount = parentTreeNode.children.length;\r\n\r\n            if (newTreeNode.childrenCount === 0) {\r\n                newTreeNode.childrenCount = 5000;\r\n            }\r\n\r\n\r\n            if (newTreeNode.childrenCount) {\r\n                newTreeNode.iconClass = undefined;\r\n            }\r\n\r\n            sortChildren(parentTreeNode.children);\r\n\r\n            newTreeNode.parentId = parentTreeNode.id;\r\n        } else {\r\n\r\n            // if no parent is given replace the current root node with this node\r\n            $scope.treeData = newTreeNode;\r\n            $scope.treeData.unCollapsible = true;\r\n            newTreeNode.parentId = null;\r\n        }\r\n\r\n        return newTreeNode;\r\n    };\r\n\r\n    removeNode = function(id) {\r\n        var\r\n            parentNode,\r\n            nodeToDelete = treeNodes[id];\r\n\r\n        $log.debug(\'Removing a node \' + id);\r\n\r\n        if (nodeToDelete) {\r\n            if (nodeToDelete.parentId !== null && treeNodes[nodeToDelete.parentId] !==\r\n                undefined) {\r\n                // find parent node\r\n                parentNode = treeNodes[nodeToDelete.parentId];\r\n\r\n                // remove nodeToDelete from parent node\'s children\r\n                parentNode.children = parentNode.children.filter(function(el) {\r\n                    return el.id !== id;\r\n                });\r\n\r\n                parentNode.childrenCount = parentNode.children.length;\r\n\r\n                if (parentNode.childrenCount === 0) {\r\n                    parentNode.iconClass = \'fa fa-file-o\';\r\n                }\r\n            }\r\n\r\n            delete treeNodes[id];\r\n        }\r\n\r\n    };\r\n\r\n    sortChildren = function(values) {\r\n        var orderBy = [\'label\', \'id\'];\r\n\r\n        values.sort(function(a, b) {\r\n            var i,\r\n                key,\r\n                result;\r\n\r\n            for (i = 0; i < orderBy.length; i += 1) {\r\n                key = orderBy[i];\r\n                if (a.hasOwnProperty(key) && b.hasOwnProperty(key)) {\r\n                    result = a[key].toLowerCase()\r\n                        .localeCompare(b[key].toLowerCase());\r\n                    if (result !== 0) {\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // a must be equal to b\r\n            return 0;\r\n        });\r\n\r\n        return values;\r\n    };\r\n\r\n    config = {\r\n\r\n        //folderIconClass: \'glyphicon glyphicon-folder-close\',\r\n\r\n        scopeMenu: [{\r\n                items: [{\r\n                    id: \'project\',\r\n                    label: \'Project Hierarchy\',\r\n                    action: function() {\r\n                        $scope.config.state.activeScope = \'project\';\r\n                        $scope.config.selectedScope = $scope.config.scopeMenu[0].items[0];\r\n                    }\r\n                }, {\r\n                    id: \'composition\',\r\n                    label: \'Composition\',\r\n                    action: function() {\r\n                        $scope.config.state.activeScope = \'composition\';\r\n                        $scope.config.selectedScope = $scope.config.scopeMenu[0].items[1];\r\n                    }\r\n                }]\r\n            }\r\n\r\n        ],\r\n\r\n        preferencesMenu: [{\r\n            items: [{\r\n                    id: \'preferences 1\',\r\n                    label: \'Preferences 1\'\r\n                },\r\n\r\n                {\r\n                    id: \'preferences 2\',\r\n                    label: \'Preferences 2\'\r\n                },\r\n\r\n                {\r\n                    id: \'preferences 3\',\r\n                    label: \'Preferences 3\',\r\n                    menu: [{\r\n                        items: [{\r\n                            id: \'sub_preferences 1\',\r\n                            label: \'Sub preferences 1\'\r\n                        }, {\r\n                            id: \'sub_preferences 2\',\r\n                            label: \'Sub preferences 2\',\r\n                            action: function(data) {\r\n                                $log.log(data);\r\n                            }\r\n                        }]\r\n                    }]\r\n                }\r\n            ]\r\n        }],\r\n\r\n        showRootLabel: true,\r\n\r\n        // Tree Event callbacks\r\n\r\n        nodeClick: function(e, node) {\r\n            console.log(\'Node was clicked:\', node);\r\n        },\r\n\r\n        nodeDragStart: function(e, node) {\r\n            console.log(\'Node is beibg dragged:\', node);\r\n        },\r\n\r\n        nodeDragEnd: function(e, node) {\r\n            console.log(\'Node is not dragged anymore:\', node);\r\n        },\r\n\r\n        nodeDblclick: function(e, node) {\r\n            console.log(\'Node was double-clicked:\', node);\r\n        },\r\n\r\n        nodeContextmenuRenderer: function(e, node) {\r\n            console.log(\'Contextmenu was triggered for node:\', node);\r\n\r\n            return getNodeContextmenu(node);\r\n\r\n        },\r\n\r\n        nodeExpanderClick: function(e, node, isExpand) {\r\n            console.log(\'Expander was clicked for node:\', node, isExpand);\r\n        },\r\n\r\n        pagination: {\r\n            itemsPerPage: 10\r\n        },\r\n\r\n        loadChildren: function(e, node, count, isBackpaging) {\r\n            var deferred = $q.defer();\r\n\r\n            console.log(\'--loading children\');\r\n\r\n            $timeout(function() {\r\n\r\n                    var dummyParent = {\r\n                            children: []\r\n                        },\r\n                        newChildren,\r\n                        offset;\r\n\r\n                    if (!isBackpaging) {\r\n\r\n                        if (!isNaN(node.lastLoadedChildPosition)) {\r\n                            offset = node.lastLoadedChildPosition + 1;\r\n                        } else {\r\n                            offset = 0;\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        offset = node.firstLoadedChildPosition - count;\r\n\r\n                    }\r\n\r\n                    newChildren = dummyTreeDataGenerator(dummyParent, \'Async \' + node.id,\r\n                        count || 20, 0, offset);\r\n                    deferred.resolve(newChildren);\r\n                },\r\n                500\r\n            );\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n    };\r\n\r\n    $scope.config = config;\r\n    //$scope.config.disableManualSelection = true;\r\n    $scope.config.selectedScope = $scope.config.scopeMenu[0].items[0];\r\n    $scope.config.nodeClassGetter = function(node) {\r\n        var nodeCssClass = \'\';\r\n\r\n        if (node.order % 2 === 0) {\r\n            nodeCssClass = \'even\';\r\n        }\r\n\r\n        return nodeCssClass;\r\n    };\r\n    $scope.treeData = {};\r\n    $scope.config.state = {\r\n        // id of activeNode\r\n        activeNode: \'Node item 0.0\',\r\n\r\n        // ids of selected nodes\r\n        selectedNodes: [\'Node item 0.0\'],\r\n\r\n        expandedNodes: [\'Node item 0\', \'Node item 0.0\'],\r\n\r\n        // id of active scope\r\n        activeScope: \'project\'\r\n    };\r\n\r\n\r\n    addNode(null, \'ROOT\');\r\n    dummyTreeDataGenerator($scope.treeData, \'Node item \', 1, 1);\r\n\r\n});\r\n");
$templateCache.put("/library/contextmenu/docs/readme.md","`isisContextmenu` is a directive for displaying contextual-menu-like call-outs. Attach it as an attribute on triggering object.\r\n\r\nUse the following attributes along:\r\n\r\n * `contextmenuConfig` - {object} configuration options:\r\n    - `triggerEvent` - {string} the DOM event triggering appearance\r\n    - `contentTemplateUrl` - {string} url of template for content. Uses a `hierarchical-menu` as default.\r\n    - `position` - {string} mouse coordinates by default but with this option you can override menu position to `\'left bottom\'` or `\'right bottom\'` of triggering element\r\n    - `menuCssClass` - {string} applied to the contextmenu shell element\r\n * `contextmenuData` - {object} data passed to shell directive in template. By default, specify a menu structure for `hierarchical-menu`.\r\n * `contextmenu-disabled` - {function} if set, will be evaluated before showing menu\r\n * `contextmenu` - {function} callback function called before menu is instantiated\r\n * `menuParentScope` - {object} – the menu\'s scope is inherited from this. By default this is the triggering directive\'s scope.\r\n * `doNotAutocloseOnClick` - {boolean}, false by default\r\n\r\nIt also registers the `contextmenuService` for opening and closing menus manually. Exposed methods:\r\n\r\n * `open` with arguments:\r\n    - triggerElement, contentTemplateUrl, aScope, position, doNotAutocloseOnClick\r\n * `close` - no arguments");
$templateCache.put("/library/dropdownNavigator/docs/readme.md","`dropdownNavigator` is a directive to visualize a vertical, multi-hierarchical navigator.\r\n\r\nIt uses `hierarchicalMenu` components for its items\' submenus. Consult demo.js in source for configuration options.");
$templateCache.put("/library/hierarchicalMenu/docs/readme.md","`hierarchicalMenu` is a directive for creating hierarchical menus.\r\n\r\nSee `dropdownMenu` structure in demo.js in source for configuration options.");
$templateCache.put("/library/itemList/docs/readme.md","`itemList` renders content as a list-group with extra options. Depends on jQuery UI (not bundled) if sortable option used.\r\nIt requires `list-data` and `config` attributes.\r\n\r\n`list-data` should be an object with an `items` array member representing the content items to render. Items can have\r\nthe following properties:\r\n\r\n* `id`: {string},\r\n* `title`: {string},\r\n* `cssClass`: {string},\r\n* `toolTip`: {string},\r\n* `description`: {string},\r\n* `lastUpdated`: {Object}:\r\n    - time:{Date},\r\n    - user: {string}.\r\n* `stats`: {Array of Objects with following properties}:\r\n    - value:{string},\r\n    - toolTip: {string},\r\n    - iconClass: {string}.\r\n* `details`: {string},\r\n* `headerTemplateUrl`: {string},\r\n* `detailsTemplateUrl`: {string},\r\n* `taxonomyTerms`: {Array of objects with the following properties}:\r\n    - id: {string}\r\n    - name: {string}\r\n    - url: {string}\r\n\r\nThe following options are allowed in `config`:\r\n\r\n* `sortable`: {boolean}, defaults to true,\r\n* `onItemDragStart` and `onItemDragEnd`: {function}, if both these callbacks are set, items are draggable. Will not work if sortable is turned on.\r\n* `secondaryItemMenu`:  {boolean}, defaults to true, controls if context menu should be offered as drop-down in top right corner,\r\n* `detailsCollapsible`: {true},\r\n* `showDetailsLabel`: {string}, default: \"Show details\",\r\n* `hideDetailsLabel`: {string}, default: \"Hide details\",\r\n* `newItemForm`: {Object} with the following properties (if not set not add new item control is not displayed):\r\n    - title: {string},\r\n    - itemTemplateUrl: {string},\r\n    - expanded: {boolean},\r\n    - controller: {function},\r\n* `filter`: {Object}, if set a filter input is displayed.\r\n* `noItemsMessage`: {string} message to show when list is empty, default message says: \"No items to show.\"\r\n\r\nEvents exposed to callbacks in `config`:\r\n\r\n* `itemSort`: {function ( jQEvent, ui )},\r\n* `itemClick`: {function(event, node)},\r\n* `itemContextmenuRenderer`: {function(event, node)},\r\n* `detailsRenderer`: {function ( item )}.");
$templateCache.put("/library/searchBox/docs/readme.md","`searchBox` is a customizable search/filter input");
$templateCache.put("/library/simpleDialog/docs/readme.md","`simpleDialog` is a service for quick creation of confirm dialogs. It is a wrapper around [Bootstrap modals](http://angular-ui.github.io/bootstrap)\r\nand inherits all of its options.\r\n\r\nThe dialog creation is invoked through the `open(options)` method.\r\n\r\n`simpleDialog`-specific options are:\r\n\r\n * `dialogTitle`\r\n * `dialogContentTemplate` - the body of the dialog. Url or id of Angular-template (eg. if preloaded)\r\n * `onOk` - callback on OK\r\n * `onCancel` - callback on Cancel\r\n * `validator` - a function, if set, invoked when OK is clicked. Needs to return `true` to close dialog and result OK.\r\n\r\n`controller` and `template` are used internally. Do not set in options unless you would like to extend default functionality.");
$templateCache.put("/library/treeNavigator/docs/readme.md","`treeNavigator` is a tree component directive. It needs the following attributes:\r\n\r\n__`treeData`__ - Data to render in a recursive structure with the following node-schema:\r\n\r\n  * `label`: {string} label,\r\n  * `extraInfo`: {string} any extra info to display after label (custom template can be set here for whatever content),\r\n  * `children`: {array} array of children after __children got loaded__,\r\n  * `childrenCount`: {int} indicates the number of children (0 if none),\r\n  * `nodeData`: {object} arbitrary data object,\r\n  * `iconClass`: {string} css classes for setting the node icon,\r\n  * `draggable`: {boolean} if node is draggable,\r\n  * `collapsedIconClass`: {string} to overwrite global setting,\r\n  * `expandedIconClass`: {string} to overwrite global setting,\r\n  * `unCollapsible`: {boolean} if true, node can not collapse.\r\n\r\n__`config`__ - Object with options and tree state.\r\n\r\nHeader options:\r\n\r\n   * `scopeMenu`: {array} a `hierarchical-menu`-structure to render as scope menu. User has to take care of\r\n   handling actions and any kind of reconfigurations when an item is clicked,\r\n   * `preferencesMenu`: {array} another `hierarchical-menu`-structure for the preferences menu (gear icon).\r\n\r\nIf `scopeMenu` or `preferencesMenu` is not set, header is not displayed.\r\n\r\nRendering options:\r\n\r\n   * `collapsedIconClass`: {string} default: \'icon-arrow-right\',\r\n   * `expandedIconClass`: {string} default: \'icon-arrow-down\', compile\r\n   * `folderIconClass`: {string} if set, this icon will decorate nodes with children,\r\n   * `showRootLabel`: {boolean} if root node should get displayed. False by default.\r\n   * `nodeClassGetter`: {function(node)}. If specified, it should return a string of CSS class for the given node.\r\n   Make it work fast.\r\n   * `disableManualSelection`: {boolean} set if node is manually selectable (eg. by clicking) or not\r\n   * `extraInfoTemplateUrl`: {string} Url of custom template for extra info.\r\n\r\nEvent callbacks:\r\n\r\n   * `nodeClick`: {function(event, node)},\r\n   * `nodeDblclick`: {function(event, node)},\r\n   * `nodeContextmenuRenderer`: {function(event, node)},\r\n   * `nodeExpanderClick`: {function(event, node, isExpand)},\r\n   * `loadChildren`: {function(event, node)}.\r\n\r\nTree state:\r\n\r\n   * `activeNode`: {string} id of active node,\r\n   * `selectedNodes`: {array} of node ids,\r\n   * `expandedNodes`: {array} of node ids\r\n   * `activeScope`: {string} id of active scope");}]);